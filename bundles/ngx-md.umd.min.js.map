{"version":3,"sources":["ng://ngx-md/lib/ngx-md.service.ts","ng://ngx-md/lib/ngx-md.component.ts","ng://ngx-md/lib/ngx-md.config.ts","ng://ngx-md/lib/ngx-md.module.ts"],"names":["NgxMdService","_http","this","Renderer","extendRenderer","setMarkedOptions","prototype","getContent","path","get","responseType","pipe","map","res","catchError","handleError","_renderer","extractData","text","options","Object","assign","gfm","tables","breaks","pedantic","sanitize","smartLists","smartypants","renderer","setOptions","compile","data","parse","error","errMsg","fetch","body","json","err","JSON","stringify","status","statusText","message","toString","throwError","listitem","test","replace","Injectable","args","providedIn","HttpClient","NgxMdComponent","_mdService","_el","platformId","defineProperty","value","_path","onPathChange","_data","onDataChange","nativeElement","innerHTML","highlightContent","ngAfterViewInit","processRaw","_md","prepare","decodeHtml","html","txt","document","createElement","_this","_ext","split","splice","join","subscribe","console","Promise","reject","raw","isCodeBlock_1","line","trimLeft","substring","trim","async","isPlatformBrowser","Prism.highlightAll","Component","selector","template","styles","ElementRef","Inject","PLATFORM_ID","Input","NgxMdConfig","NgxMdModule","forRoot","ngModule","providers","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core'\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { throwError, Observable } from 'rxjs'\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { Renderer, setOptions, parse } from 'marked';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgxMdService {\r\n  private _renderer: any = new Renderer();\r\n  constructor(private _http: HttpClient) {\r\n    this.extendRenderer();\r\n    this.setMarkedOptions({});\r\n  }\r\n\r\n  // get the content from remote resource\r\n  getContent(path: string): Observable<any> {\r\n      return this._http.get(path, {responseType: 'text'}).pipe(map(res => res), catchError(this.handleError))\r\n  }\r\n\r\n   public get renderer() {\r\n     return this._renderer;\r\n   }\r\n\r\n   // handle data\r\n   public extractData(res: any): string {\r\n     return res.text() || '';\r\n   }\r\n\r\n   public setMarkedOptions(options: any) {\r\n     options = Object.assign({\r\n       gfm: true,\r\n       tables: true,\r\n       breaks: false,\r\n       pedantic: false,\r\n       sanitize: false,\r\n       smartLists: true,\r\n       smartypants: false\r\n     }, options);\r\n     options.renderer = this._renderer;\r\n     setOptions(options);\r\n   }\r\n\r\n   // comple markdown to html\r\n   public compile(data: string) {\r\n      return parse(data);\r\n   }\r\n\r\n   // handle error\r\n   private handleError(error: any): any {\r\n     let errMsg: string;\r\n     if (error instanceof fetch) {\r\n       const body = error.json() || '';\r\n       const err = body.error || JSON.stringify(body);\r\n       errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\r\n     } else {\r\n       errMsg = error.message ? error.message : error.toString();\r\n     }\r\n     return throwError(errMsg);\r\n   }\r\n\r\n   // extend marked render to support todo checkbox\r\n   private extendRenderer() {\r\n     this._renderer.listitem = function(text: string) {\r\n      if (/^\\s*\\[[x ]\\]\\s*/.test(text)) {\r\n      text = text\r\n        .replace(/^\\s*\\[ \\]\\s*/, '<input type=\"checkbox\" style=\" vertical-align: middle; margin: 0 0.2em 0.25em -1.6em; font-size: 16px; \" disabled> ')\r\n        .replace(/^\\s*\\[x\\]\\s*/, '<input type=\"checkbox\" style=\" vertical-align: middle; margin: 0 0.2em 0.25em -1.6em; font-size: 16px; \" checked disabled> ');\r\n          return '<li style=\"list-style: none\">' + text + '</li>';\r\n        } else {\r\n          return '<li>' + text + '</li>';\r\n        }\r\n      };\r\n   }\r\n}\r\n","\r\nimport { Component, ElementRef, OnInit, AfterViewInit, Input, PLATFORM_ID, Inject } from '@angular/core';\r\nimport { NgxMdService } from './ngx-md.service';\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport * as Prism from 'prismjs';\r\n\r\n@Component({\r\n    selector: 'markdown,[Markdown],ngx-md,[NgxMd]',\r\n    template: '<ng-content></ng-content>',\r\n    styles: [\r\n        `.token.operator, .token.entity, .token.url, .language-css .token.string, .style .token.string {\r\n            background: none;\r\n        }`\r\n    ]\r\n})\r\nexport class NgxMdComponent implements  AfterViewInit {\r\n    private _path: string;\r\n    private _data: string;\r\n    private _md: any;\r\n    private _ext: string;\r\n    changeLog: string[] = [];\r\n\r\n    constructor(\r\n        private _mdService: NgxMdService,\r\n        private _el: ElementRef,\r\n        @Inject(PLATFORM_ID) private platformId: string\r\n    ) { }\r\n\r\n   \r\n\r\n    @Input()\r\n    set path(value: string) {\r\n      if (value) {\r\n        this._path = value;\r\n        this.onPathChange();\r\n      }\r\n    }\r\n\r\n    @Input()\r\n    set data(value: string) {\r\n      if (value) {\r\n        this._data = value;\r\n        this.onDataChange(value);\r\n      }\r\n    }\r\n\r\n\r\n    // on input\r\n    onDataChange(data: string) {\r\n      if (data) {\r\n        this._el.nativeElement.innerHTML = this._mdService.compile(data);\r\n      } else {\r\n        this._el.nativeElement.innerHTML = '';\r\n      }\r\n      this.highlightContent(false);\r\n    }\r\n\r\n    /**\r\n     *  After view init\r\n     */\r\n    ngAfterViewInit() {\r\n      if (this._path) {\r\n        this.onPathChange();\r\n      } else if (!this._data) {\r\n        this.processRaw();\r\n      }\r\n    }\r\n\r\n    processRaw() {\r\n      this._md = this.prepare(decodeHtml(this._el.nativeElement.innerHTML));\r\n      this._el.nativeElement.innerHTML = this._mdService.compile(this._md);\r\n      this.highlightContent(false);\r\n    }\r\n\r\n    /**\r\n     * get remote conent;\r\n     */\r\n    onPathChange() {\r\n        this._ext = this._path && this._path.split('.').splice(-1).join();\r\n        this._mdService.getContent(this._path)\r\n            .subscribe(data => {\r\n                this._md = this._ext !== 'md' ? '```' + this._ext + '\\n' + data + '\\n```' : data;\r\n                this._el.nativeElement.innerHTML = this._mdService.compile(this.prepare(this._md));\r\n                this.highlightContent(false);\r\n            },\r\n            err => this.handleError);\r\n    }\r\n\r\n    /**\r\n     * catch http error\r\n     */\r\n    private handleError(error: any): Promise<any> {\r\n        console.error('An error occurred', error); // for demo purposes only\r\n        return Promise.reject(error.message || error);\r\n    }\r\n\r\n    /**\r\n     * Prepare string\r\n     */\r\n     prepare(raw: string) {\r\n        if (!raw) {\r\n            return '';\r\n        }\r\n        if (this._ext === 'md' || !this.path) {\r\n            let isCodeBlock = false;\r\n            return raw.split('\\n').map((line: string) => {\r\n                if (this.trimLeft(line).substring(0, 3) === '```') {\r\n                    isCodeBlock = !isCodeBlock;\r\n                }\r\n                return isCodeBlock ? line : line.trim();\r\n            }).join('\\n');\r\n        }\r\n        return raw.replace(/\\\"/g, '\\'');\r\n    }\r\n\r\n    /**\r\n     * Trim left whitespace\r\n     */\r\n    private trimLeft(line: string) {\r\n        return line.replace(/^\\s+|\\s+$/g, '');\r\n    }\r\n\r\n    /**\r\n     * Use Prism to highlight code snippets only on the browser\r\n     */\r\n    private highlightContent(async: boolean): void {\r\n      if (isPlatformBrowser(this.platformId)) {\r\n        Prism.highlightAll(async);\r\n      }\r\n    }\r\n}\r\n\r\nfunction decodeHtml(html: string) { // https://stackoverflow.com/a/7394787/588521\r\n    const txt = document.createElement('textarea');\r\n    txt.innerHTML = html;\r\n    return txt.value;\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class NgxMdConfig {\r\n  /** config modue */\r\n\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { NgxMdService } from './ngx-md.service';\r\nimport { NgxMdConfig } from './ngx-md.config';\r\nimport { NgxMdComponent } from './ngx-md.component';\r\n\r\n@NgModule({\r\n  declarations: [NgxMdComponent],\r\n  providers: [NgxMdService],\r\n  exports: [NgxMdComponent],\r\n})\r\nexport class NgxMdModule {\r\n  public static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxMdModule,\r\n      providers: [NgxMdConfig]\r\n    };\r\n  }\r\n}\r\n"]}